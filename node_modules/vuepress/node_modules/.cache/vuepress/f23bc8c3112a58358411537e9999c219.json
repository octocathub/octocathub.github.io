{"remainingRequest":"/home/bingyu/vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/bingyu/vue/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/bingyu/vue/node_modules/vue-loader/lib/index.js??ref--1-1!/home/bingyu/vue/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/home/bingyu/vue/docs/2-Cpp/2-1-C.md?vue&type=template&id=1503f98c&","dependencies":[{"path":"/home/bingyu/vue/docs/2-Cpp/2-1-C.md","mtime":1549626445337},{"path":"/home/bingyu/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"c语言\\\"><a href=\\\"#c语言\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> C语言</h1> <h2 id=\\\"概述\\\"><a href=\\\"#概述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概述</h2> <p>在C语言中，内存单元的地址成为指针，专门用来存放地址的变量，成为指针变量。\\nC语言程序设计中使用指针可以：</p> <ol><li>使程序简洁、紧凑、高效</li> <li>有效的表示复杂的数据结构</li> <li>动态分配内存</li> <li>得到多余一个的函数返回值</li></ol> <h2 id=\\\"指针的初始化\\\"><a href=\\\"#指针的初始化\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 指针的初始化</h2> <p>初始化即为赋初值。\\n一般形式为：\\n&lt;存储类型&gt; &lt;数据类型&gt; * &lt;指针变量名&gt; = &lt;地址量&gt;；\\ne.g.</p> <div class=\\\"language-c extra-class\\\"><pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">*</span>p <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>a<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//将变量a的地址作为初值赋予了int型指针p</span>\\n</code></pre></div><p>或者</p> <div class=\\\"language-c extra-class\\\"><pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">*</span>p <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>a<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>或者</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>int a;\\nint *p;\\np = &amp;a;\\n</code></pre></div><h2 id=\\\"实质\\\"><a href=\\\"#实质\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实质</h2> <p>指针即是地址，变量定义后即需要内存空间，而内存空间则为其分配好后，内存单元的编号即是地址也就是指针。指针指向变量，指针的值是变量的起始地址。也就是说指针中存放的就是该变量的地址，该地址就是一个内存单元的编号，为一个16进制数字。  而变量中存在的则是提前定义好的数值。下面举例：\\ne.g.</p> <div class=\\\"language-c extra-class\\\"><pre class=\\\"language-c\\\"><code><span class=\\\"token keyword\\\">short</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// short占2个字节(16bit)</span>\\n<span class=\\\"token keyword\\\">int</span> b<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// int占4个字节(32bit)</span>\\n<span class=\\\"token keyword\\\">float</span> c<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">20.00</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// float占4个字节(32bit)</span>\\n<span class=\\\"token keyword\\\">char</span> d<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// char占1个字节(8bit)</span>\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token operator\\\">*</span>p<span class=\\\"token punctuation\\\">;</span>\\np <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>b<span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">//指针变量p指向了整型变量b</span>\\n</code></pre></div><p>如图：\\n<img\"+(_vm._ssrAttr(\"src\",require(\"./img/pointer.png\")))+\" alt></p> <h2 id=\\\"指针的运算\\\"><a href=\\\"#指针的运算\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 指针的运算</h2> <ol><li>指针运算是以指针变量所存放的地址量作为运算量而进行的运算。</li> <li>指针运算的实质就是地址的计算</li> <li>指针运算的种类是有限的，它只能进行赋值运算，算术运算和关系运算。</li></ol> <h2 id=\\\"指针关系运算\\\"><a href=\\\"#指针关系运算\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 指针关系运算</h2> <ol><li>两指针之间的关系运算表示它们指向的地址位置之间的关系。指向地址打的指针大于指向地址小的指针。</li> <li>指针与一般整数变量之间的关系运算没有意义。但可以和零进行等于或不等于的关系运算，判断指针是否为空。</li></ol>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}