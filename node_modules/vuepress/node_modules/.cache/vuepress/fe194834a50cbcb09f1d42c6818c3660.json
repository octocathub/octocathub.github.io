{"remainingRequest":"/home/bingyu/vue/node_modules/vue-loader/lib/index.js??ref--1-1!/home/bingyu/vue/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/home/bingyu/vue/docs/2-Cpp/2-2-Cpp.md?vue&type=template&id=09a6eb79&","dependencies":[{"path":"/home/bingyu/vue/docs/2-Cpp/2-2-Cpp.md","mtime":1549626481893},{"path":"/home/bingyu/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/bingyu/vue/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"c\"><a class=\"header-anchor\" href=\"#c\" aria-hidden=\"true\">#</a> C++</h1>\n<h2 id=\"程序的编译和调试\"><a class=\"header-anchor\" href=\"#程序的编译和调试\" aria-hidden=\"true\">#</a> 程序的编译和调试</h2>\n<h3 id=\"gcc编译器\"><a class=\"header-anchor\" href=\"#gcc编译器\" aria-hidden=\"true\">#</a> gcc编译器</h3>\n<p>gcc hello.c -o hello\n-o 输出可执行文件\n-c 只要求编译器输出目标代码(.o文件)而不必输出可执行文件\n-g 用于调试\n-Wall 显示一切警告\n./hello 查看输出结果</p>\n<p>当我们在改动源码文件时候，需要重新编译再次执行。</p>\n<h3 id=\"程序调试\"><a class=\"header-anchor\" href=\"#程序调试\" aria-hidden=\"true\">#</a> 程序调试</h3>\n<p>利用 <strong>FILE</strong>,<strong>LINE</strong>,<strong>FUNCTION</strong> 实现代码跟踪调试。(两个下划线)</p>\n<ul>\n<li><strong>FILE</strong> : 显示文件名</li>\n<li><strong>LINE</strong>: 显示行号</li>\n<li><strong>FUNCTION</strong>: 显示函数名\n使用这些可以记录进日志，方便调试大型程序。</li>\n</ul>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,%s,%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">,</span>__FUNCTION__<span class=\"token punctuation\">,</span><span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"c语言基础\"><a class=\"header-anchor\" href=\"#c语言基础\" aria-hidden=\"true\">#</a> C语言基础</h3>\n<p>一个程序应当包含两部分内容:</p>\n<ul>\n<li>对数据的描述，在程序中要知道数据的类型和数据的组织形式，即数据结构。</li>\n<li>对操作的描述，即操作步骤，也就是算法。也可以说是程序的解决思路(逻辑)。</li>\n</ul>\n<h4 id=\"算法的基本概念\"><a class=\"header-anchor\" href=\"#算法的基本概念\" aria-hidden=\"true\">#</a> 算法的基本概念</h4>\n<ul>\n<li>做任何事情都有一定的步骤。步骤要按照一定的顺序进行，缺一不可，次序也不能错。广义的说，为解决一个问题而采取的方法和步骤就称为算法。</li>\n</ul>\n<h2 id=\"指针\"><a class=\"header-anchor\" href=\"#指针\" aria-hidden=\"true\">#</a> 指针</h2>\n<h3 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\" aria-hidden=\"true\">#</a> 概述</h3>\n<p>在C语言中，内存单元的地址成为指针，专门用来存放地址的变量，成为指针变量。\nC语言程序设计中使用指针可以：</p>\n<ol>\n<li>使程序简洁、紧凑、高效</li>\n<li>有效的表示复杂的数据结构</li>\n<li>动态分配内存</li>\n<li>得到多余一个的函数返回值</li>\n</ol>\n<h3 id=\"地址和变量\"><a class=\"header-anchor\" href=\"#地址和变量\" aria-hidden=\"true\">#</a> 地址和变量</h3>\n<p>在计算机内存中，每一个字节单元，都有一个编号，称为地址。内存以字节为单位开始编号，这个编号即是地址。\n一个字节为8位，为1 Byte = 8 Bit\n编译或函数调用时为 其分配内存单元。\n变量是对程序中数据存储空间的抽象。\n我们看到的地址其实是起始地址，一般是由低往高存储，默认是连续性存储，所以我们打印看到的都是起始地址。</p>\n<h3 id=\"指针-2\"><a class=\"header-anchor\" href=\"#指针-2\" aria-hidden=\"true\">#</a> 指针</h3>\n<p>在C语言中，内存单元的地址称为指针，专门用来存放地址的变量，称为指针变量。在不影响理解的情况中，有时对地址、指针和指针变量不区分，通称指针。</p>\n<h3 id=\"指针变量的说明\"><a class=\"header-anchor\" href=\"#指针变量的说明\" aria-hidden=\"true\">#</a> 指针变量的说明</h3>\n<p>一般形式为：\n&lt;存储类型&gt; &lt;数据类型&gt; * &lt;指针变量名&gt; = &lt;地址量&gt;；\n指针在说明的同时，也可以被赋予初值，称为指针的初始化\n一般形式为：\n&lt;存储类型&gt; &lt;数据类型&gt; * &lt;指针变量名&gt; = &lt;地址量&gt;;\ne.g.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//将变量a的地址作为初值赋予了int型指针p</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在上面语句中，把变量a的地址作为初值赋予了刚说明的int型指针p。\n或者</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>或者</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>指针的存储类型是指针变量本身的存储类型。指针说明时指定的数据类型不是指针变量本身的数据类型，而是指针目标的数据类型。简称为指针的数据类型。</p>\n<h3 id=\"实质\"><a class=\"header-anchor\" href=\"#实质\" aria-hidden=\"true\">#</a> 实质</h3>\n<p>指针即是地址，变量定义后即需要内存空间，而内存空间则为其分配好后，内存单元的编号即是地址也就是指针。指针指向变量，指针的值是变量的起始地址。也就是说指针中存放的就是该变量的地址，该地址就是一个内存单元的编号，为一个16进制数字。  而变量中存在的则是提前定义好的数值。下面举例：\ne.g.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">short</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// short占2个字节(16bit)</span>\n<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// int占4个字节(32bit)</span>\n<span class=\"token keyword\">float</span> c<span class=\"token operator\">=</span><span class=\"token number\">20.00</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// float占4个字节(32bit)</span>\n<span class=\"token keyword\">char</span> d<span class=\"token operator\">=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// char占1个字节(8bit)</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//指针变量p指向了整型变量b</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如图：\n<img src=\"./img/pointer.png\" alt=\"\"></p>\n<h3 id=\"指针的运算\"><a class=\"header-anchor\" href=\"#指针的运算\" aria-hidden=\"true\">#</a> 指针的运算</h3>\n<ol>\n<li>指针运算是以指针变量所存放的地址量作为运算量而进行的运算。</li>\n<li>指针运算的实质就是地址的计算</li>\n<li>指针运算的种类是有限的，它只能进行赋值运算，算术运算和关系运算。</li>\n</ol>\n<h3 id=\"指针关系运算\"><a class=\"header-anchor\" href=\"#指针关系运算\" aria-hidden=\"true\">#</a> 指针关系运算</h3>\n<ol>\n<li>两指针之间的关系运算表示它们指向的地址位置之间的关系。指向地址打的指针大于指向地址小的指针。</li>\n<li>指针与一般整数变量之间的关系运算没有意义。但可以和零进行等于或不等于的关系运算，判断指针是否为空。</li>\n</ol>\n</div>\n",null]}