{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{178:function(a,s,e){\"use strict\";e.r(s);var t=e(0),l=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,s=a.$createElement,e=a._self._c||s;return e(\"div\",{staticClass:\"content\"},[e(\"h1\",{attrs:{id:\"shell编程\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#shell编程\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" Shell编程\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"概述\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概述\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 概述\")]),a._v(\" \"),e(\"p\",[a._v(\"常用的shell有Bourne shell (sh)、C shell (csh) 和 Korn shell (ksh), 各有优缺点。Bourne shell 是 UNIX 最初使用的 shell，并且在每种 UNIX 上都可以使用, 在 shell 编程方面相当优秀，但在处理与用户的交互方面做得不如其他几种shell。Linux 操作系统缺省的 shell 是Bourne Again shell，它是 Bourne shell 的扩展，简称 Bash，与 Bourne shell 完全向后兼容，并且在Bourne shell 的基础上增加、增强了很多特性。Bash放在/bin/bash中，它有许多特色，可以提供如命令补全、命令编辑和命令历史表等功能，它还包含了很多 C shell 和 Korn shell 中的优点，有灵活和强大的编程接口，同时又有很友好的用户界面。\")]),a._v(\" \"),e(\"blockquote\",[e(\"p\",[a._v(\"此处学习的为bash shell\")])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"shell脚本的实质\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#shell脚本的实质\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" shell脚本的实质\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"shell脚本语言是解释型语言\")]),a._v(\" \"),e(\"li\",[a._v(\"shell脚本的实质-shell命令的有序集合\")])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"为什么要使用-filename-sh-行shell脚本呢？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要使用-filename-sh-行shell脚本呢？\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 为什么要使用 \"),e(\"code\",[a._v(\"./filename.sh\")]),a._v(\" 行shell脚本呢？\")]),a._v(\" \"),e(\"p\",[a._v(\"普通的shell命令会从标准路径中进行查询，可以通过 echo $PATH 来查询，如果从这些标准路径中查询不到命令，那么就认为是错误的，即是提示命令找不到。所以需要使用 ./\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"shell变量\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#shell变量\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" shell变量\")]),a._v(\" \"),e(\"p\",[a._v(\"shell允许用户建立变量存储数据，但不支持数据类型(整型、字符、浮点型)，将任何赋给变量的值都解释为一串字符。\\n以$开头的字符在shell中会被解释为变量。\\n\"),e(\"strong\",[a._v(\"细节问题\")]),a._v(\"：\")]),a._v(\" \"),e(\"ol\",[e(\"li\",[a._v(\"没有类型\")]),a._v(\" \"),e(\"li\",[a._v('没有空格作为分隔符(与C语言不同，C语言对空格不做任何编译)，即\"count = 1\"为错误的。赋值的时候等号的两边都没有空格。\\ne.g.')])]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[a._v(\"count\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\"1\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"echo\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[a._v(\"$count\")]),a._v(\"\\nDATE\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'date'\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"echo\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[a._v(\"$DATE\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"shell有以下4种变量：\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"用户自定义变量\")]),a._v(\" \"),e(\"li\",[a._v(\"位置变量即命令行参数\")]),a._v(\" \"),e(\"li\",[a._v(\"预定义变量\")]),a._v(\" \"),e(\"li\",[a._v(\"环境变量\")])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"用户自定义变量\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用户自定义变量\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 用户自定义变量\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"在shell编程种通常使用全大写变量，方便识别\\ne.g.  COUNT=1\")]),a._v(\" \"),e(\"li\",[a._v(\"变量的调用：在变量前加$\\ne.g.  echo $HOME\")]),a._v(\" \"),e(\"li\",[a._v(\"Linux shell/bash从右向左赋值(变量赋值的时候不用加$，变量调用的时候加$)\\ne.g. Y=y\\nX=$Y\\necho $X\\ny\")]),a._v(\" \"),e(\"li\",[a._v(\"使用unset命令删除变量的赋值\\ne.g. Z=hello\\necho $Z\\nhello\\nunset Z\\necho $Z\\n\"),e(\"img\",{attrs:{src:\"https://ws1.sinaimg.cn/large/006DGX4tly1fzr0fisserj30ec03pwfp.jpg\",alt:\"\"}})])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"位置变量\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#位置变量\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 位置变量\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"$0 与键入的明了了行一样，包含脚本文件名\")]),a._v(\" \"),e(\"li\",[a._v(\"$1,$2,.....$9 分别包含第一个到第九个命令行参数\")]),a._v(\" \"),e(\"li\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"环境变量\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#环境变量\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 环境变量\")]),a._v(\" \"),e(\"p\",[a._v(\"显示所有的环境变量的命令: export 或 env。\\n常用shell环境变量：\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"$HOME: /etc/passwd文件种列出的用户主目录\")]),a._v(\" \"),e(\"li\",[a._v(\"$IFS: Internal Field Separator,默认为空格，Tab及换行符\")]),a._v(\" \"),e(\"li\",[a._v(\"$PATH: shell默认搜索路径\")]),a._v(\" \"),e(\"li\",[a._v(\"$PS1,$PS2：默认提示符($)及换行提示符(>)\")]),a._v(\" \"),e(\"li\",[a._v(\"$TERM: 终端类型，常用的有vt100，ansi，vt200，xterm等。\")])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"功能语句\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#功能语句\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 功能语句\")]),a._v(\" \"),e(\"p\",[a._v(\"shell程序与语句\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"shell程序由0或多个shell语句构成。shell语句包括三类：说明性语句，功能性语句和结构性语句。\")])]),a._v(\" \"),e(\"ol\",[e(\"li\",[a._v(\"说明性语句:\\n以#开头到该行结束，不被解释执行。\")]),a._v(\" \"),e(\"li\",[a._v(\"功能性语句：\\n任意的shell命令，用户程序或其他的shell程序。\")]),a._v(\" \"),e(\"li\",[a._v(\"结构性语句:\\n条件测试语句、多路分支语句、循环语句、循环控制语句等。\")])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"说明性语句-注释行\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说明性语句-注释行\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 说明性语句(注释行)\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"注释行可以出现在程序中的开始位置，既可以单独占用一行，也可以接在执行语句的后面。以#开始到所在行的行尾部分，都不被解释执行。e.g.\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token shebang important\"}},[a._v(\"#!/bin/bash\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"#\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"# 本程序说明\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"#\")]),a._v(\"\\ncommand_1  \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"#command_1的语句说明\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"..\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"..\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"..\")]),a._v(\"\\ncommand_n  \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"#command_n的语句说明\")]),a._v(\"\\n\")])])]),e(\"h3\",{attrs:{id:\"常用功能性语句-命令\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用功能性语句-命令\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 常用功能性语句(命令)\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"read从标准输入读取一行，并赋值给后面的变量，其语法为：\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"read\")]),a._v(\" var\\n\")])])]),e(\"p\",[a._v(\"把读入的数据全部赋给var\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"read\")]),a._v(\" var1 var2 var3\\n\")])])]),e(\"p\",[a._v(\"把读入行中的第一个单词(word)赋值给var1，第二个单词赋值给var2，......把其余所有的词赋值给最后一个变量。\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"如果执行read语句时标准输入无数据，则程序在此停留等等候，直到数据的到来或被终止执行。\")])])])}],!1,null,null,null);s.default=l.exports}}]);","extractedComments":[]}