(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{385:function(t,a,v){t.exports=v.p+"assets/img/1.86bafd3a.png"},446:function(t,a,v){"use strict";v.r(a);var _=v(13),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"io流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#io流"}},[t._v("#")]),t._v(" IO流")]),t._v(" "),_("p",[t._v("IO = 流，它的核心就是对文件的操作，对于 字节 、字符类型的输入和输出流。")]),t._v(" "),_("p",[t._v("IO是指对数据流的输入和输出，也称为IO流，IO流主要分为两大类，字节流和字符流。\n字节流可以处理任何类型的数据，如图片，视频等，\n字符流只能处理字符类型的数据。")]),t._v(" "),_("p",[t._v("IO流的本质是数据传输，并且流是单向的。")]),t._v(" "),_("p",[t._v("常用的字节流FileInputStream、FileOutputStream、ObjectInputStream、ObjectOutputStream。")]),t._v(" "),_("p",[t._v("IO分阻塞型IO和非阻塞型IO（NIO）")]),t._v(" "),_("p",[t._v("阻塞型IO在读取数据时，如果数据未到达，会一直阻塞到读取到数据为止，所以称为阻塞型IO，在高并发的环境下性能不佳。")]),t._v(" "),_("p",[t._v("NIO不是使用 “流” 来作为数据的传输方式，而是使用通道，通道的数据传输是双向的，且NIO的数据写入和读取都是异步的，不会阻塞线程，所以称为非阻塞型IO，在高并发的环境下性能很好。")]),t._v(" "),_("h2",{attrs:{id:"java流操作的相关类或接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java流操作的相关类或接口"}},[t._v("#")]),t._v(" Java流操作的相关类或接口")]),t._v(" "),_("p",[t._v("File -- 文件类")]),t._v(" "),_("p",[t._v("RandomAccessFile -- 随机存储文件类")]),t._v(" "),_("p",[t._v("InputStream -- 字节输入流")]),t._v(" "),_("p",[t._v("OutputStream -- 字节输出流")]),t._v(" "),_("p",[t._v("Reader -- 字符输入流")]),t._v(" "),_("p",[t._v("Writer -- 字符输出流")]),t._v(" "),_("h2",{attrs:{id:"java流类图结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java流类图结构"}},[t._v("#")]),t._v(" Java流类图结构")]),t._v(" "),_("p",[_("img",{attrs:{src:v(385),alt:""}})]),t._v(" "),_("h2",{attrs:{id:"流的概念和作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流的概念和作用"}},[t._v("#")]),t._v(" 流的概念和作用")]),t._v(" "),_("p",[t._v("流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在设备间传输称之为流。")]),t._v(" "),_("p",[t._v("流的本质是数据传输，根据数据传输的特性将流区分为各种类，方便更直观的进行数据操作。")]),t._v(" "),_("h2",{attrs:{id:"io流的分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#io流的分类"}},[t._v("#")]),t._v(" IO流的分类")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("根据数据处理的不同类型分为：字节流和字符流")])]),t._v(" "),_("li",[_("p",[t._v("根据数据流向不同分为：输入流和输出流")])])]),t._v(" "),_("h2",{attrs:{id:"字符流和字节流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字符流和字节流"}},[t._v("#")]),t._v(" 字符流和字节流")]),t._v(" "),_("p",[t._v("字符流的由来：因为数据编码的不同，而有了对字符进行高效操作的流对象，本质上其实就是对于字节流的读取时，去查了指定的码表。")]),t._v(" "),_("p",[t._v("字节流和字符流的区别：")]),t._v(" "),_("p",[t._v("· 读写单位的不同：字节流以字节（8bit）为单位。字符流以字符为单位，根据码表映射字符，一次可能读多个字节。")]),t._v(" "),_("p",[t._v("· 处理对象不同：字节流可以处理任何类型的数据，如图片、avi等，而字符流只能处理字符类型的数据。")]),t._v(" "),_("h2",{attrs:{id:"输入流和输出流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#输入流和输出流"}},[t._v("#")]),t._v(" 输入流和输出流")]),t._v(" "),_("p",[t._v("对于输入流只能进行读操作。")]),t._v(" "),_("p",[t._v("对于输出流只能进行鞋操作。")]),t._v(" "),_("p",[t._v("程序中需要对于传输数据的不同特性而使用不用的流。")])])}),[],!1,null,null,null);a.default=r.exports}}]);