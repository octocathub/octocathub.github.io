(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{386:function(t,a,s){t.exports=s.p+"assets/img/1.6b6bda85.png"},387:function(t,a,s){t.exports=s.p+"assets/img/2.58f94991.png"},455:function(t,a,s){"use strict";s.r(a);var e=s(13),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" # 集合")]),t._v(" "),e("h2",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),e("p",[t._v("通过连续的存储空间，存储相同类型元素的集合。\n内存存储：有序  ---\x3e 索引：递增有序\n存储内容：固定  ---\x3e 随机访问： 高效")]),t._v(" "),e("p",[t._v("为什么要存储相同类型？\n元素类型相同，也意味着内存宽度一致。\n所以，元素的地址 = 首元素的地址 + (索引*元素宽度)")]),t._v(" "),e("p",[t._v("这也是高效的原因。")]),t._v(" "),e("h2",{attrs:{id:"map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map")]),t._v(" "),e("h2",{attrs:{id:"常用集合的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用集合的分类"}},[t._v("#")]),t._v(" 常用集合的分类")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("Collection 接口的接口 对象的集合（单列集合）\n├——-List 接口：元素按进入先后有序保存，可重复\n│—————-├ LinkedList 接口实现类， 链表， 插入删除， 没有同步， 线程不安全\n│—————-├ ArrayList 接口实现类， 数组， 随机访问， 没有同步， 线程不安全\n│—————-└ Vector 接口实现类 数组， 同步， 线程安全\n│ ———————-└ Stack 是Vector类的实现类\n└——-Set 接口： 仅接收一次，不可重复，并做内部排序\n├—————-└HashSet 使用hash表（数组）存储元素\n│————————└ LinkedHashSet 链表维护元素的插入次序\n└ —————-TreeSet 底层实现为二叉树，元素排好序\n\nMap 接口 键值对的集合 （双列集合）\n├———Hashtable 接口实现类， 同步， 线程安全\n├———HashMap 接口实现类 ，没有同步， 线程不安全-\n│—————–├ LinkedHashMap 双向链表和哈希表实现\n│—————–└ WeakHashMap\n├ ——–TreeMap 红黑树对所有的key进行排序\n└———IdentifyHashMap\n")])])]),e("h2",{attrs:{id:"list和set集合详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list和set集合详解"}},[t._v("#")]),t._v(" List和Set集合详解")]),t._v(" "),e("h3",{attrs:{id:"_1-list和set的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-list和set的区别"}},[t._v("#")]),t._v(" 1.list和set的区别")]),t._v(" "),e("p",[e("img",{attrs:{src:s(386),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_2-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-list"}},[t._v("#")]),t._v(" 2.List")]),t._v(" "),e("ul",[e("li",[t._v("ArrayList：底层数据结构是数组，查询快，增删慢，线程不安全，效率高，可以存储重复元素")]),t._v(" "),e("li",[t._v("LinkedList 底层数据结构是链表，查询慢，增删快，线程不安全，效率高，可以存储重复元素")]),t._v(" "),e("li",[t._v("Vector:底层数据结构是数组，查询快，增删慢，线程安全，效率低，可以存储重复元素")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(387),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"集合遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合遍历"}},[t._v("#")]),t._v(" 集合遍历")]),t._v(" "),e("h3",{attrs:{id:"map遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map遍历"}},[t._v("#")]),t._v(" map遍历")])])}),[],!1,null,null,null);a.default=r.exports}}]);