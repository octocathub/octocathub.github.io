(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{539:function(s,a,t){"use strict";t.r(a);var e=t(19),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"基本操作指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作指令"}},[s._v("#")]),s._v(" 基本操作指令")]),s._v(" "),t("h2",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),t("p",[s._v("设置值\nset key value")]),s._v(" "),t("p",[s._v('set number "10086"')]),s._v(" "),t("p",[s._v("redis数据库是无序的方式存放数据库键的，一个新加入的键可能会出现在数据库的任何位置上。")]),s._v(" "),t("p",[s._v("对一个已经存在的键设置值，会覆盖掉旧值。")]),s._v(" "),t("p",[s._v("set key value [NX|XX]")]),s._v(" "),t("p",[s._v("如果给定NX选项，set命令只会在键没值的情况下执行设置操作；如果键已经存在，那么set命令将放弃执行设置操作，并发挥空值nil表示设置失败。\n如果给定XX选项，set命令只会在键有值的情况下执行设置操作；如果键没有值，那么set命令将放弃执行设置操作，并发挥空值nil表示设置失败。")]),s._v(" "),t("p",[s._v("获取键值")]),s._v(" "),t("p",[s._v("get key")]),s._v(" "),t("p",[s._v('get number\n"10086"')]),s._v(" "),t("p",[s._v("如果给定的键在数据库中没有与之相关联的值，那么get命令将返回一个空值：\nget date\n(nil)")]),s._v(" "),t("h2",{attrs:{id:"getset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getset"}},[s._v("#")]),s._v(" getset")]),s._v(" "),t("p",[s._v("getset首先获取字符串键目前已有的值，接着为键设置新值。最后把之前获取到的旧值返回给用户：")]),s._v(" "),t("p",[s._v("getset key new_value")]),s._v(" "),t("p",[s._v('get number\n"10086"\ngetset number "123456"\n"10086" -- 返回旧值')]),s._v(" "),t("p",[s._v("如果被设置的键并不存在于数据库，那么getset命令将返回空值作为键的旧值。")]),s._v(" "),t("h2",{attrs:{id:"mset-一次为多个字符串键设置值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mset-一次为多个字符串键设置值"}},[s._v("#")]),s._v(" mset： 一次为多个字符串键设置值")]),s._v(" "),t("p",[s._v("mset key value [key value ...]")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("redis"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mset message "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" number "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10086"')]),s._v("  \n")])])]),t("p",[s._v("mset命令可以有效地提高程序的效率。因为执行多条set命令需要客户端和服务器之间进行多次网络通信，并因此耗费大量的时间。而使用一条mset命令去代替多条set命令只需要一次网络通信，从而可以减少程序执行多个设置操作时的时间。")]),s._v(" "),t("h2",{attrs:{id:"mget-一次获取多个字符串建的值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mget-一次获取多个字符串建的值"}},[s._v("#")]),s._v(" mget：一次获取多个字符串建的值")]),s._v(" "),t("p",[s._v("mget key [key...]")]),s._v(" "),t("p",[s._v("mget返回一个列表作为结果，这个列表按照用户执行命令时给定键的顺序排列各个键的值。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mget message number  \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10086"')]),s._v("\n")])])]),t("p",[s._v("mget命令可以将多个获取操作所需的网络通信次数从原来的N次降至一次，从而有效地提高程序的运行效率.")]),s._v(" "),t("h2",{attrs:{id:"msetnx-只在键不存在的情况下-一次为多个字符串设置值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#msetnx-只在键不存在的情况下-一次为多个字符串设置值"}},[s._v("#")]),s._v(" msetnx: 只在键不存在的情况下,一次为多个字符串设置值")]),s._v(" "),t("p",[s._v("msetnx命令与mset命令一样,都可以对多个字符串键进行设置:")]),s._v(" "),t("p",[s._v("msetnx key value [key value ...]")]),s._v(" "),t("p",[s._v("msetnx命令与mset的主要区别在于,msetnx只会在所有给定键不存在的情况下对键进行设置,而不会像mset那样直接覆盖已有的值.\n如果在给定值当中,即使有一个键已经有值了,那么msetnx命令也会放弃对所有给定键的设置操作.")]),s._v(" "),t("h2",{attrs:{id:"strlen-获取字符串值的字节长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strlen-获取字符串值的字节长度"}},[s._v("#")]),s._v(" strlen: 获取字符串值的字节长度")]),s._v(" "),t("p",[s._v("strlen key")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" strlen number  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" \n")])])]),t("p",[s._v("对于不存在的键,stelen命令将返回0.")]),s._v(" "),t("h2",{attrs:{id:"getrange-获取字符串值指定索引范围上的内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getrange-获取字符串值指定索引范围上的内容"}},[s._v("#")]),s._v(" getrange: 获取字符串值指定索引范围上的内容")]),s._v(" "),t("p",[s._v("getrange key start end")]),s._v(" "),t("p",[s._v("getrange命令接受的是闭区间索引范围,也就是说,位于start索引和end索引上的值也会被包含在命令返回的内容当中.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" getrange message "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" \n\ngetrange message "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),s._v(" \n")])])]),t("h2",{attrs:{id:"setrange-对字符串值的指定索引范围进行设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setrange-对字符串值的指定索引范围进行设置"}},[s._v("#")]),s._v(" setrange: 对字符串值的指定索引范围进行设置")]),s._v(" "),t("p",[s._v("通过使用setrange命令,可以将字符串键的值从索引index开始的部门替换为指定的内容,被替换内容的长度取决于新内容的长度.")]),s._v(" "),t("p",[s._v("setrange key index substitute")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" get message\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setrange message "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"redis"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" get message \n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello redis"')]),s._v("\n")])])]),t("h2",{attrs:{id:"append-追加新内容到值的末尾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#append-追加新内容到值的末尾"}},[s._v("#")]),s._v(" append: 追加新内容到值的末尾")]),s._v(" "),t("p",[s._v("将给定的内容追加到字符串键已有值的末尾：\nappend key suffix\n执行完追加操作之后，会返回字符串值当前的长度作为命令的返回值。")]),s._v(" "),t("p",[s._v('append description "is a database"')]),s._v(" "),t("h3",{attrs:{id:"处理不存在的键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理不存在的键"}},[s._v("#")]),s._v(" 处理不存在的键")]),s._v(" "),t("p",[s._v("如果用户给定的键并不存在，那么append命令会将键的值初始化为空字符串，然后再执行追加操作。")]),s._v(" "),t("p",[s._v("使用场景： 存储日志")]),s._v(" "),t("h2",{attrs:{id:"incrby、decrby-对整数值执行加法操作和减法操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#incrby、decrby-对整数值执行加法操作和减法操作"}},[s._v("#")]),s._v(" INCRBY、DECRBY：对整数值执行加法操作和减法操作")]),s._v(" "),t("p",[s._v("当字符串键存储的值能够被Redis解释为整数时，用户就可以通过INCRBY命令和DECRBY命令对被存储的整数值执行加法或减法操作。INCRBY命令用于为整数值加上指定的整数增量，并返回键在执行加法操作之后的值：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("incrby key increment   \n")])])]),t("p",[s._v("与INCRBY命令的作用正好相反，DECRBY命令用于为整数值减去指定的整数减量，并返回键在执行减法操作之后的值:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("decrby key increment   \n")])])]),t("p",[s._v("另外需要注意的一点是，INCRBY和DECRBY的增量和减量也必须能够被Redis解释为整数，使用其他类型的值作为增量或减量将返回一个错误。")]),s._v(" "),t("p",[s._v("处理不存在的键当INCRBY命令或DECRBY命令遇到不存在的键时，命令会先将键的值初始化为0，然后再执行相应的加法操作或减法操作。")]),s._v(" "),t("h2",{attrs:{id:"incr、decr-对整数值执行加1操作和减1操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#incr、decr-对整数值执行加1操作和减1操作"}},[s._v("#")]),s._v(" INCR、DECR：对整数值执行加1操作和减1操作")]),s._v(" "),t("p",[s._v("因为对整数值执行加1操作或减1操作的场景经常会出现，所以为了能够更方便地执行这两个操作，Redis分别提供了用于执行加1操作的INCR命令以及用于执行减1操作的DECR命令。INCR命令的作用就是将字符串键存储的整数值加上1，效果相当于执行INCRBY key 1：")]),s._v(" "),t("p",[s._v("incr key")]),s._v(" "),t("p",[s._v("ECR命令的作用就是将字符串键存储的整数值减去1，效果相当于执行DECRBY key 1：")]),s._v(" "),t("p",[s._v("DECR key")]),s._v(" "),t("p",[s._v("使用场景 ： 生成id，或者 计数器")]),s._v(" "),t("h1",{attrs:{id:"散列-hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#散列-hash"}},[s._v("#")]),s._v(" 散列---hash")]),s._v(" "),t("p",[s._v("把相关联的数据打包起来存储的数据结构，而这种数据结构就是散列（hash）键。")]),s._v(" "),t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),t("p",[s._v("Redis的散列键会将一个键和一个散列在数据库里关联起来，用户可以在散列中为任意多个字段（f ield）设置值。与字符串键一样，散列的字段和值既可以是文本数据，也可以是二进制数据。通过使用散列键，用户可以把相关联的多项数据存储到同一个散列里面，以便对这些数据进行管理，或者针对它们执行批量操作。")]),s._v(" "),t("h2",{attrs:{id:"hset-为字段设置值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hset-为字段设置值"}},[s._v("#")]),s._v(" HSET: 为字段设置值")]),s._v(" "),t("p",[s._v("HSET hash field value")]),s._v(" "),t("ul",[t("li",[s._v("如果给定的字段并不存在于散列中，那么这次设置就是一次性创建操作，命令将在散列里面关联给定的字段和值。返回1")]),s._v(" "),t("li",[s._v("如果给定的字段原本以及存在于散列里，那么这次设置就是一次更新操作，将覆盖旧值。返回0")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" hset article::10086 title "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"helloworld"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" hset article::10086 content "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("blockquote",[t("p",[s._v("散列中包含的字段就像数据库包含的键一样，在实际中都是以无序方式进行排列的。")])]),s._v(" "),t("h2",{attrs:{id:"hsetnx-只在字段不存在的情况下为他设置值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hsetnx-只在字段不存在的情况下为他设置值"}},[s._v("#")]),s._v(" HSETNX: 只在字段不存在的情况下为他设置值")]),s._v(" "),t("p",[s._v("HSETNX hash field value\nHSETNX 命令在字段不存在并且成功为他设置值时返回1，在字段已经存在并导致设置操作未能成功执行时返回0.")]),s._v(" "),t("h2",{attrs:{id:"hget-获取字段的值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hget-获取字段的值"}},[s._v("#")]),s._v(" HGET: 获取字段的值")]),s._v(" "),t("p",[s._v("HGET hash field")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" HGET article::10086 title\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"helloworld"')]),s._v("\n")])])]),t("p",[s._v("如果用户给定的字段并不存在于散列当中或者不存在该散列，那么HGET命令将返回一个空值。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" HGET article::10086 location\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nil"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("h2",{attrs:{id:"hstrlen-获取字段值的字节长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hstrlen-获取字段值的字节长度"}},[s._v("#")]),s._v(" HSTRLEN：获取字段值的字节长度")]),s._v(" "),t("p",[s._v("HSTRLEN hash field")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" HSTRLEN article::10086 title\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])])]),t("p",[s._v("如果用户给定的字段并不存在于散列当中或者不存在该散列，那么HGET命令将返回一个0.")]),s._v(" "),t("h2",{attrs:{id:"hexists-检查字段是否存在于散列中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hexists-检查字段是否存在于散列中"}},[s._v("#")]),s._v(" HEXISTS：检查字段是否存在于散列中")]),s._v(" "),t("p",[s._v("HEXISTS hash field\n如果散列包含了给定的字段，那么命令返回1，否则命令返回0.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" HEXISTS article::10086 title\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" HEXISTS article::10086 author\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h2",{attrs:{id:"hdel-删除字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdel-删除字段"}},[s._v("#")]),s._v(" HDEL：删除字段")]),s._v(" "),t("p",[s._v("HDEL命令用于删除散列中的指定字段及其相关联的值")]),s._v(" "),t("p",[s._v("HDEL hash field")]),s._v(" "),t("p",[s._v("当给定字段存在于散列中并且被成功删除时，命令返回1；如果给定字段并不存在于散列中，或者给定的散列并不存在，那么命令将返回0表示删除失败。")]),s._v(" "),t("h2",{attrs:{id:"hlen-获取散列包含的字段数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hlen-获取散列包含的字段数量"}},[s._v("#")]),s._v(" HLEN：获取散列包含的字段数量")]),s._v(" "),t("p",[s._v("HLEN hash")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" HLEN article::10086\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),t("p",[s._v("如果给定的散列不存在。那么返回0")]),s._v(" "),t("h2",{attrs:{id:"hmset-一次为多个字段设置值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hmset-一次为多个字段设置值"}},[s._v("#")]),s._v(" HMSET：一次为多个字段设置值")]),s._v(" "),t("p",[s._v("HMSET hash field value [field value ...]")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("HMSET article::10086 title "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" content "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"helloredis"')]),s._v(" \n")])])]),t("h2",{attrs:{id:"hmget-一次获取多个字段的值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hmget-一次获取多个字段的值"}},[s._v("#")]),s._v(" HMGET：一次获取多个字段的值")]),s._v(" "),t("p",[s._v("HMGET hash field [field ...]")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("HMGET article::10086 title  content \n")])])]),t("h2",{attrs:{id:"hkeys-hvals-hgetall-获取所有字段-所有值-所有字段和值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hkeys-hvals-hgetall-获取所有字段-所有值-所有字段和值"}},[s._v("#")]),s._v(" HKEYS,HVALS,HGETALL: 获取所有字段，所有值，所有字段和值")]),s._v(" "),t("p",[s._v("HKEYS hash\nHVALS hash\nHGETALL hash")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" HKEYS article::10086\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"title"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"content"')]),s._v("\n")])])]),t("h1",{attrs:{id:"列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[s._v("#")]),s._v(" 列表")]),s._v(" "),t("p",[s._v("list时一种线性有序的结构，可以按照元素被推入到列表中的顺序来存储元素，列表中的元素可以重复。")]),s._v(" "),t("h2",{attrs:{id:"lpush-将元素推入列表左端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lpush-将元素推入列表左端"}},[s._v("#")]),s._v(" LPUSH: 将元素推入列表左端")]),s._v(" "),t("p",[s._v("LPUSH list item [item item ...]")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" LPUSH todo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"buy"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"watch"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),t("h2",{attrs:{id:"rpush-将元素推入列表右端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rpush-将元素推入列表右端"}},[s._v("#")]),s._v(" RPUSH: 将元素推入列表右端")]),s._v(" "),t("p",[s._v("RPUSH list item [item item ...]")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" RPUSH todo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"buy"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"watch"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),t("h2",{attrs:{id:"lpushx-rpushx-只对已存在的列表执行推入操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lpushx-rpushx-只对已存在的列表执行推入操作"}},[s._v("#")]),s._v(" LPUSHX,RPUSHX: 只对已存在的列表执行推入操作")]),s._v(" "),t("p",[s._v("注意： 与LPUSH,RPUSH 命令不一样的地方，LPUSHX,RPUSHX命令每次只能推入一个元素。尝试向\nLPUSHX或RPUSHX命令给定多个元素将引发错误。")]),s._v(" "),t("h2",{attrs:{id:"lpop-弹出-移除列表最左端的元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lpop-弹出-移除列表最左端的元素"}},[s._v("#")]),s._v(" LPOP： 弹出/移除列表最左端的元素")]),s._v(" "),t("p",[s._v("返回值为被移除的元素。")]),s._v(" "),t("p",[s._v("LPOP list")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" LPOP todo\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"watch"')]),s._v("\n")])])]),t("h2",{attrs:{id:"rpop-弹出-移除列表最右端的元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rpop-弹出-移除列表最右端的元素"}},[s._v("#")]),s._v(" RPOP： 弹出/移除列表最右端的元素")]),s._v(" "),t("p",[s._v("返回值为被移除的元素。")]),s._v(" "),t("p",[s._v("RPOP list")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" RPOP todo\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"buy"')]),s._v("\n")])])]),t("h2",{attrs:{id:"rpoplpush-将右端弹出的元素推入左端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rpoplpush-将右端弹出的元素推入左端"}},[s._v("#")]),s._v(" RPOPLPUSH: 将右端弹出的元素推入左端")]),s._v(" "),t("p",[s._v("RPOPLPUSH source target")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("RPOPLPUSH todo todo \n")])])]),t("h2",{attrs:{id:"llen-获取列表的长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#llen-获取列表的长度"}},[s._v("#")]),s._v(" LLEN：获取列表的长度")]),s._v(" "),t("p",[s._v("LLEN list")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("LLEN todo\n")])])]),t("h2",{attrs:{id:"lindex-获取指定索引上的元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lindex-获取指定索引上的元素"}},[s._v("#")]),s._v(" LINDEX: 获取指定索引上的元素")]),s._v(" "),t("p",[s._v("LINDEX list index")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("LINDEX todo "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" \n")])])]),t("h2",{attrs:{id:"lrange-获取指定索引范围上的元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lrange-获取指定索引范围上的元素"}},[s._v("#")]),s._v(" LRANGE： 获取指定索引范围上的元素")]),s._v(" "),t("p",[s._v("LRANGE list start end")]),s._v(" "),t("p",[s._v("LRANGE命令接受一个列表，一个开始索引和一个结束索引作为参数，然后依次返回列表从开始索引到结束索引范围内的所有元素，其中开始索引和结束索引对应的元素也会被包含在命令返回的元素当中。")]),s._v(" "),t("p",[s._v("LRANGE todo 1 2")]),s._v(" "),t("p",[s._v("获取列表包含的所有元素： LRANGE todo 0-1")]),s._v(" "),t("p",[s._v("该命令可以实现分页操作。")])])}),[],!1,null,null,null);a.default=r.exports}}]);