(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{422:function(t,a,s){"use strict";s.r(a);var e=s(19),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),s("h2",{attrs:{id:"锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),s("p",[t._v("锁是一种同步机制，用于保证一个资源在任何时候只能被一个进程使用，如果有其他进程想要使用相同的资源，那么就必须等待，直到正在使用资源的进程放弃使用权为止。")]),t._v(" "),s("p",[t._v("一个锁的实现通常会有获取巨额释放两钟操作：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("获取操作用于取得资源的独占使用权。在任何时候，最多只能有一个进程取得锁，我们吧成功取得锁的这个进程称为锁的持有者。在锁已经呗持有的情况下，所有尝试再次获取锁的操作都会失败。")])]),t._v(" "),s("li",[s("p",[t._v("释放操作作用于放弃资源的独占使用权，一般由锁的持有者调用。在锁被释放之后，其他进程就可以再次尝试获取这个锁了。")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);