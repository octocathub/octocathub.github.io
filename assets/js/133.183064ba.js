(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{527:function(s,t,e){"use strict";e.r(t);var a=e(19),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"基本操作指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本操作指令"}},[s._v("#")]),s._v(" 基本操作指令")]),s._v(" "),e("h2",{attrs:{id:"字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),e("p",[s._v("设置值\nset key value")]),s._v(" "),e("p",[s._v('set number "10086"')]),s._v(" "),e("p",[s._v("redis数据库是无序的方式存放数据库键的，一个新加入的键可能会出现在数据库的任何位置上。")]),s._v(" "),e("p",[s._v("对一个已经存在的键设置值，会覆盖掉旧值。")]),s._v(" "),e("p",[s._v("set key value [NX|XX]")]),s._v(" "),e("p",[s._v("如果给定NX选项，set命令只会在键没值的情况下执行设置操作；如果键已经存在，那么set命令将放弃执行设置操作，并发挥空值nil表示设置失败。\n如果给定XX选项，set命令只会在键有值的情况下执行设置操作；如果键没有值，那么set命令将放弃执行设置操作，并发挥空值nil表示设置失败。")]),s._v(" "),e("p",[s._v("获取键值")]),s._v(" "),e("p",[s._v("get key")]),s._v(" "),e("p",[s._v('get number\n"10086"')]),s._v(" "),e("p",[s._v("如果给定的键在数据库中没有与之相关联的值，那么get命令将返回一个空值：\nget date\n(nil)")]),s._v(" "),e("h2",{attrs:{id:"getset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getset"}},[s._v("#")]),s._v(" getset")]),s._v(" "),e("p",[s._v("getset首先获取字符串键目前已有的值，接着为键设置新值。最后把之前获取到的旧值返回给用户：")]),s._v(" "),e("p",[s._v("getset key new_value")]),s._v(" "),e("p",[s._v('get number\n"10086"\ngetset number "123456"\n"10086" -- 返回旧值')]),s._v(" "),e("p",[s._v("如果被设置的键并不存在于数据库，那么getset命令将返回空值作为键的旧值。")]),s._v(" "),e("h2",{attrs:{id:"mset-一次为多个字符串键设置值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mset-一次为多个字符串键设置值"}},[s._v("#")]),s._v(" mset： 一次为多个字符串键设置值")]),s._v(" "),e("p",[s._v("mset key value [key value ...]")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("redis"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mset message "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" number "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10086"')]),s._v("  \n")])])]),e("p",[s._v("mset命令可以有效地提高程序的效率。因为执行多条set命令需要客户端和服务器之间进行多次网络通信，并因此耗费大量的时间。而使用一条mset命令去代替多条set命令只需要一次网络通信，从而可以减少程序执行多个设置操作时的时间。")]),s._v(" "),e("h2",{attrs:{id:"mget-一次获取多个字符串建的值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mget-一次获取多个字符串建的值"}},[s._v("#")]),s._v(" mget：一次获取多个字符串建的值")]),s._v(" "),e("p",[s._v("mget key [key...]")]),s._v(" "),e("p",[s._v("mget返回一个列表作为结果，这个列表按照用户执行命令时给定键的顺序排列各个键的值。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mget message number  \n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10086"')]),s._v("\n")])])]),e("p",[s._v("mget命令可以将多个获取操作所需的网络通信次数从原来的N次降至一次，从而有效地提高程序的运行效率.")]),s._v(" "),e("h2",{attrs:{id:"msetnx-只在键不存在的情况下-一次为多个字符串设置值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#msetnx-只在键不存在的情况下-一次为多个字符串设置值"}},[s._v("#")]),s._v(" msetnx: 只在键不存在的情况下,一次为多个字符串设置值")]),s._v(" "),e("p",[s._v("msetnx命令与mset命令一样,都可以对多个字符串键进行设置:")]),s._v(" "),e("p",[s._v("msetnx key value [key value ...]")]),s._v(" "),e("p",[s._v("msetnx命令与mset的主要区别在于,msetnx只会在所有给定键不存在的情况下对键进行设置,而不会像mset那样直接覆盖已有的值.\n如果在给定值当中,即使有一个键已经有值了,那么msetnx命令也会放弃对所有给定键的设置操作.")]),s._v(" "),e("h2",{attrs:{id:"strlen-获取字符串值的字节长度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strlen-获取字符串值的字节长度"}},[s._v("#")]),s._v(" strlen: 获取字符串值的字节长度")]),s._v(" "),e("p",[s._v("strlen key")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" strlen number  \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" \n")])])]),e("p",[s._v("对于不存在的键,stelen命令将返回0.")]),s._v(" "),e("h2",{attrs:{id:"getrange-获取字符串值指定索引范围上的内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getrange-获取字符串值指定索引范围上的内容"}},[s._v("#")]),s._v(" getrange: 获取字符串值指定索引范围上的内容")]),s._v(" "),e("p",[s._v("getrange key start end")]),s._v(" "),e("p",[s._v("getrange命令接受的是闭区间索引范围,也就是说,位于start索引和end索引上的值也会被包含在命令返回的内容当中.")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" getrange message "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("  \n"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" \n\ngetrange message "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),s._v(" \n")])])]),e("h2",{attrs:{id:"setrange-对字符串值的指定索引范围进行设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setrange-对字符串值的指定索引范围进行设置"}},[s._v("#")]),s._v(" setrange: 对字符串值的指定索引范围进行设置")]),s._v(" "),e("p",[s._v("通过使用setrange命令,可以将字符串键的值从索引index开始的部门替换为指定的内容,被替换内容的长度取决于新内容的长度.")]),s._v(" "),e("p",[s._v("setrange key index substitute")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" get message\n"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setrange message "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"redis"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" get message \n"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello redis"')]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);