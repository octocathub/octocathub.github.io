(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{501:function(t,a,e){"use strict";e.r(a);var s=e(19),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" Vuex")]),t._v(" "),e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),e("p",[t._v("Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间数据的共享。")]),t._v(" "),e("h2",{attrs:{id:"好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#好处"}},[t._v("#")]),t._v(" 好处")]),t._v(" "),e("ul",[e("li",[t._v("能够在vuex中集中管理共享的数据，易于开发和后期维护")]),t._v(" "),e("li",[t._v("能够高效的实现组件之间的数据共享，提高开发效率")])]),t._v(" "),e("h2",{attrs:{id:"使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),e("p",[t._v("一般情况下，只有组件之间共享的数据，才有必要存储到vuex中，对于组件中的私有数据，依旧存储在自身的data中。")]),t._v(" "),e("h2",{attrs:{id:"基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[t._v("#")]),t._v(" 基本使用")]),t._v(" "),e("ol",[e("li",[t._v("安装vuex依赖包")])]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install vuex --save \n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("导入vuex包")])]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import  Vuex from 'vuex'\nVue.use(Vuex)\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("创建store对象")])]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const store = new Vuex.Store({\n    //state中存放的是全局共享数据\n    state: {count: 0}\n})\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("将store对象挂载到vue实例中")])]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new Vue({\n    el: '#app',\n    redner: h => h(app),\n    router,\n    // 将创建的共享数据对象，挂载到vue实例中\n    // 所有的组件，就可以直接从store中获取全局的数据了\n    store\n})\n")])])]),e("h2",{attrs:{id:"vuex核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex核心概念"}},[t._v("#")]),t._v(" vuex核心概念")]),t._v(" "),e("h3",{attrs:{id:"state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" state")]),t._v(" "),e("p",[t._v("state提供唯一的公共数据源，所有共享的数据都要统一放到store的state中进行存储。")]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 创建store数据源，提供唯一公共数据源\nconst store = new Vuex.Store({\n    state: {count: 0}\n})\n")])])]),e("p",[t._v("组件访问state中的第一种方式：")]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$store.state.全局数据名称\n")])])]),e("p",[t._v("组件访问state中数据的第二种方式：")]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 1. 从vuex中按需导入 mapState函数\nimport {mapState} from 'vuex'\n")])])]),e("p",[t._v("通过刚才导入的mapState函数，将当前组件需要的全局数据，映射为当前组建的computed计算属性：")]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 2. 将全局数据，映射为当前组建的计算属性\ncomputed: {\n    ...mapState(['count'])\n}\n")])])]),e("h3",{attrs:{id:"mutation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mutation"}},[t._v("#")]),t._v(" Mutation")]),t._v(" "),e("p",[t._v("Mutation用于变更store中的数据。")]),t._v(" "),e("ol",[e("li",[t._v("只能通过mutation变更store数据，不可以直接操作store中数据。")]),t._v(" "),e("li",[t._v("通过这种方式虽然操作起来稍微繁琐一点，但是可以集中监控所有数据的变化。")])]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 定义Mutation\nconst store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        add(state){\n            // 变更状态\n            state.count++\n        }\n    }\n})\n")])])]),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 触发mutation\nmethods: {\n    handle(){\n        // 触发mutation第一种方式\n        this.$store.commit('add')\n    }\n}\n")])])]),e("p",[t._v("在触发mutations时传递参数：")]),t._v(" "),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 定义Mutation\nconst store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        addN(state,step){\n            // 变更状态\n            state.count += step\n        }\n    }\n})\n")])])]),e("div",{staticClass:"language-node extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 触发mutation\nmethods: {\n    handle2(){\n        // 在调用commit函数触发mutations时携带参数\n        this.$store.commit('addN',3)\n    }\n}\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);