(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{583:function(t,n,s){"use strict";s.r(n);var e=s(13),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"systemd-进程管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#systemd-进程管理"}},[t._v("#")]),t._v(" Systemd 进程管理")]),t._v(" "),s("h2",{attrs:{id:"systemd-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#systemd-介绍"}},[t._v("#")]),t._v(" systemd 介绍")]),t._v(" "),s("p",[t._v("systemd是目前Linux系统上主要的系统守护进程管理工具，由于init一方面对于进程的管理是串行化的，容易出现阻塞情况，另一方面init也仅仅是执行启动脚本，并不能对服务本身进行更多的管理。所以从CentOS 7开始也由systemd取代了init作为默认的系统进程管理工具。")]),t._v(" "),s("p",[t._v("systemd所管理的所有系统资源都称作Unit，通过systemd命令集可以方便的对这些Unit进行管理。比如systemctl、hostnamectl、timedatectl、localctl等命令，这些命令虽然改写了init时代用户的命令使用习惯（不再使用chkconfig、service等命令），但确实也提供了很大的便捷性。\nsystemd 特点\n最新系统都采用systemd管理（RedHat7，CentOS7，Ubuntu15…）\nCentOS7 支持开机并行启动服务，显著提高开机启动效率\nCentOS7关机只关闭正在运行的服务，而CentOS6，全部都关闭一次。\nCentOS7服务的启动与停止不再使用脚本进行管理，也就是/etc/init.d下不在有脚本。\nCentOS7使用systemd解决原有模式缺陷，比如原有service不会关闭程序产生的子进程。\nsystemd 语法\nsystemctl [command]      [unit]（配置的应用名称）")]),t._v(" "),s("p",[t._v("command可选项\n· start：启动指定的unit          systemctl start nginx\n· stop：关闭指定的unit           systemctl stop nginx\n· restart：重启指定unit          systemctl restart nginx\n· reload：重载指定unit           systemctl reload nginx\n· enable：系统开机时自动启动指定unit，前提是配置文件中有相关配置 systemctl enable nginx\n· disable：开机时不自动运行指定unit   systemctl disable nginx\n· status：查看指定unit当前运行状态 systemctl status nginx\nsystemd 配置文件说明\n每一个 Unit 都需要有一个配置文件用于告知 systemd 对于服务的管理方式\n配置文件存放于 /usr/lib/systemd/system/，设置开机启动后会在 /etc/systemd/system 目录建立软链接文件\n每个Unit的配置文件配置默认后缀名为.service\n在 /usr/lib/systemd/system/ 目录中分为 system 和 user 两个目录，一般将开机不登陆就能运行的程序存在系统服务里，也就是 /usr/lib/systemd/system\n配置文件使用方括号分成了多个部分，并且区分大小写\nsystemd 相关文件\n实战一\n源码编译安装nginx 实现systemd管理控制\n安装nginx编译环境\nyum  -y install gcc gcc-c++    openssl-devel pcre-devel gd-devel  iproute net-tools telnet wget curl\nwget http://nginx.org/download/nginx-1.15.5.tar.gz\ntar zxf nginx-1.15.5.tar.gz &&\ncd nginx-1.15.5\n./configure --prefix=/usr/local/nginx "),s("br"),t._v("\n--with-http_ssl_module "),s("br"),t._v("\n--with-http_stub_status_module\nmake -j 4 && make install\n通用方式启动nginx")]),t._v(" "),s("p",[t._v("/usr/local/nginx/sbin/nginx  #启动\n/usr/local/nginx/sbin/nginx  -s reload  #重启\n/usr/local/nginx/sbin/nginx -s   quit   #关闭nginx\nsystemd 管理控制启动模式")]),t._v(" "),s("p",[t._v("vim      /usr/lib/systemd/system/nginx.service")]),t._v(" "),s("p",[t._v("[Unit]\nDescription=nginx\nAfter=network.target")]),t._v(" "),s("p",[t._v("[Service]\nType=forking\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s quit\nPrivateTmp=true")]),t._v(" "),s("p",[t._v("[Install]\nWantedBy=multi-user.target\n参数详解")]),t._v(" "),s("p",[t._v("systemctl restart nginx\nsystemctl enable  nginx\nsystemctl stop  nginx\n图片")]),t._v(" "),s("p",[t._v("实战二\n二进制安装tomcat 实现systemd管理控制")]),t._v(" "),s("p",[t._v("安装java环境，我已经将安装包打包到我得服务器上，也可以去官网下载")]),t._v(" "),s("p",[t._v("wget  120.78.77.38/file/jdk-8u231-linux-x64.rpm\nwget  120.78.77.38/file/apache-tomcat-9.0.27.tar.gz\n图片\nrpm -ivh  jdk-8u231-linux-x64.rpm    #rpm直接安装jdk\n配置环境变量")]),t._v(" "),s("p",[t._v("vim    /etc/profile")]),t._v(" "),s("p",[t._v("export JAVA_HOME=/usr/java/jdk1.8.0_231-amd64\nexport JRE_HOME=${JAVA_HOME}/jre"),s("br"),t._v("\nexport CLASSPATH=.😒{JAVA_HOME}/lib:${JRE_HOME}/lib"),s("br"),t._v("\nexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin\nexport  PATH=${JAVA_HOME}/bin:$PATH\nsource   /etc/profile\njava -version   #检测环境\n图片")]),t._v(" "),s("p",[t._v("安装tomcat")]),t._v(" "),s("p",[t._v("tar  -xf  apache-tomcat-9.0.27"),s("br"),t._v("\nmv  apache-tomcat-9.0.27  /usr/local/tomcat\n启动tomcat\nsh    /usr/local/tomcat/bin/startup.sh   #启动\nsh   /usr/local/tomcat/bin/shutdown.sh #关闭\nsystemd管理控制启动")]),t._v(" "),s("p",[t._v("vim      /usr/lib/systemd/system/tomcat.service")]),t._v(" "),s("p",[t._v("[Unit]\nDescription=tomcat server\nWants=network-online.target\nAfter=network.target")]),t._v(" "),s("p",[t._v('[Service]\nType=forking\nEnvironment="JAVA_HOME=/usr/java/jdk1.8.0_231-amd64"\nEnvironment="PATH=$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"\nEnvironment="CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar"\nExecStart=/usr/local/tomcat/bin/startup.sh\nExecStop=/usr/local/tomcat/bin/shutdown.sh\nRestart=on-failure')]),t._v(" "),s("p",[t._v("[Install]\nWantedBy=multi-user.target\nsystemctl restart tomcat  #启动\nsystemctl enable tomcat   #配置自启\nsystemctl stop  tomcat   #停止服务\nsystemctl status  tomcat  #检测状态\n以上两个实战nginx和tomcat程序中自带了启动停止脚本，如果启动得程序没有自带脚本则需要自己编写一个类似得启动停止脚本\n实战三\n部署jar程序 实现systemd管理控制\n实际得项目中会有一些jar程序需要启动 如果手动启动则需要输入一大串命令 停止则需要杀掉进程来停止，很麻烦\n举一个实际启动得例子切换到jar目录下\njava -jar decode.jar -Dconfig=/usr/local/abc/application.properties\n编写一个启动脚本")]),t._v(" "),s("p",[t._v("vim  demo.sh")]),t._v(" "),s("p",[t._v("#!/bin/bash")]),t._v(" "),s("h1",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("p",[t._v('source /etc/profile\njarName="abc-web.jar"\nworkDir="/usr/local/abc"')]),t._v(" "),s("p",[t._v("start(){\ncd ${workDir} && java -jar ${jarName} --spring.profiles.active=prod --server.port=9630 >uams.log 2>&1 &\n}")]),t._v(" "),s("p",[t._v('stop(){\nps -ef | grep -qP "(?<=-jar)\\s+${jarName}" && kill $(ps -ef | grep -P "(?<=-jar)\\s+${jarName}" | awk \'{print $2}\')\n}')]),t._v(" "),s("p",[t._v("case $1 in\nstart)\nstart\n;;\nstop)\nstop\n;;\nrestart)\nstop\nstart\n;;\nesac\n编写 systemd 配置文件\nvim  /usr/lib/systemd/system/abc.service")]),t._v(" "),s("p",[t._v("[Unit]\nDescription=uams server\nWants=network-online.target\nAfter=network.target")]),t._v(" "),s("p",[t._v("[Service]\nType=forking\nWorkingDirectory=/usr/local/abc/\nExecStart=/bin/bash uams.sh start\nExecStop=/bin/bash uams.sh stop\nExecReload=/bin/bash uams.sh restart\nRestart=on-failure")]),t._v(" "),s("p",[t._v("[Install]\nWantedBy=multi-user.target\n启动abc服务")]),t._v(" "),s("p",[t._v("systemctl restart abc  #启动\nsystemctl enable abc   #配置自启\nsystemctl stop  abc   #停止服务\nsystemctl status  abc  #检测状态")]),t._v(" "),s("h2",{attrs:{id:"排错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排错"}},[t._v("#")]),t._v(" 排错")]),t._v(" "),s("p",[t._v("首先看一下服务列表里有没有这个服务：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("systemctl list-unit-files --type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("service\n")])])]),s("p",[t._v("如果有的话：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("systemctl daemon-reload\n")])])]),s("p",[t._v("即可")])])}),[],!1,null,null,null);n.default=a.exports}}]);