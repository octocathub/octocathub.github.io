(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{389:function(a,s,t){a.exports=t.p+"assets/img/1.4ec928ad.png"},390:function(a,s,t){a.exports=t.p+"assets/img/2.7b2e3895.png"},391:function(a,s,t){a.exports=t.p+"assets/img/3.0d403a15.png"},489:function(a,s,t){"use strict";t.r(s);var e=t(13),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"项目调优"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目调优"}},[a._v("#")]),a._v(" 项目调优")]),a._v(" "),e("p",[a._v("在SpringBoot项目中，调优主要通过配置文件和配置JVM的参数的方式进行。")]),a._v(" "),e("h2",{attrs:{id:"修改配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改配置文件"}},[a._v("#")]),a._v(" 修改配置文件")]),a._v(" "),e("p",[a._v("关于修改配置文件application.properties。\nSpringBoot项目详细的配置文件修改文档")]),a._v(" "),e("p",[a._v("其中比较重要的有：")]),a._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[a._v("server.tomcat.max"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("connections=0 "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Maximum number of connections that the server accepts and processes at any given time.")]),a._v("\nserver.tomcat.max"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("header"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("size=0 "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Maximum size, in bytes, of the HTTP message header.")]),a._v("\nserver.tomcat.max"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("post"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("size=0 "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Maximum size, in bytes, of the HTTP post content.")]),a._v("\nserver.tomcat.max"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("threads=0 "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Maximum number of worker threads.")]),a._v("\nserver.tomcat.min"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("spare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("threads=0 "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Minimum number of worker threads.")]),a._v("\n")])])]),e("h2",{attrs:{id:"jvm调优"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优"}},[a._v("#")]),a._v(" JVM调优")]),a._v(" "),e("h3",{attrs:{id:"设置jvm参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置jvm参数"}},[a._v("#")]),a._v(" 设置Jvm参数")]),a._v(" "),e("p",[a._v("例如要配置JVM这么一大段参数：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("-XX:MetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m -XX:MaxMetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m -Xms1024m -Xmx1024m -Xmn256m -Xss256k -XX:SurvivorRatio"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" -XX:+UseConcMarkSweepGC\n")])])]),e("p",[a._v("方式一：\n如果你用的是IDEA等开发工具，来启动运行项目，那么要调试JDK就方便太多了。\n只需要将参数值设置到VM options中即可。\n如果你用的是IDEA等开发工具，来启动运行项目，那么要调试JDK就方便太多了。\n只需要将参数值设置到VM options中即可。")]),a._v(" "),e("p",[e("img",{attrs:{src:t(389),alt:""}})]),a._v(" "),e("p",[a._v("设置成功，我的GC日志和堆栈分配都已经OK了。")]),a._v(" "),e("p",[a._v("GC日志：")]),a._v(" "),e("p",[e("img",{attrs:{src:t(390),alt:""}})]),a._v(" "),e("p",[a._v("堆栈分配：\n"),e("img",{attrs:{src:t(391),alt:""}})]),a._v(" "),e("p",[a._v("方式二：\n适用于在项目部署后，在启动的时候，采用脚本或者命令行运行的时候设置。")]),a._v(" "),e("p",[a._v("先在项目路径下，给项目打包:清理旧项目")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("mvn clean\n")])])]),e("p",[a._v("打包新项目：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("mvn package -Dmaven.test.skip"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\n")])])]),e("p",[a._v("执行启动设置Jvm参数的操作。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ java -jar -XX:MetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m -XX:MaxMetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m -Xms1024m -Xmx1024m -Xmn256m -Xss256k -XX:SurvivorRatio"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" -XX:+UseConcMarkSweepGC newframe-1.0.0.jar\n")])])]),e("p",[a._v("这个时候，你再看监控，你就会发现，已经是Ok的了。\n堆栈都是按照启动时候，设置的Jvm参数启动的。")]),a._v(" "),e("p",[a._v("关于这些设置的JVM参数是什么意思，请参考第二步中的oracle官方给出的调优文档。")]),a._v(" "),e("p",[a._v("我在这边简单说一下：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("-XX:MetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m （元空间默认大小）\n-XX:MaxMetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m （元空间最大大小）\n-Xms1024m （堆最大大小）\n-Xmx1024m （堆默认大小）\n-Xmn256m （新生代大小）\n-Xss256k （棧最大深度大小）\n-XX:SurvivorRatio"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" （新生代分区比例 "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(":2）\n-XX:+UseConcMarkSweepGC （指定使用的垃圾收集器，这里使用CMS收集器）\n-XX:+PrintGCDetails （打印详细的GC日志）\n")])])]),e("p",[a._v("知识点：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("JDK8之后把-XX:PermSize 和 -XX:MaxPermGen移除了，取而代之的是\n-XX:MetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m （元空间默认大小）\n-XX:MaxMetaspaceSize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m （元空间最大大小）\n\nJDK "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("开始把类的元数据放到本地化的堆内存"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("native heap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("中，这一块区域就叫Metaspace，中文名叫元空间。\n\n使用本地化的内存有什么好处呢？最直接的表现就是java.lang.OutOfMemoryError: PermGen 空间问题将不复存在，因为默认的类的元数据分配只受本地内存大小的限制，也就是说本地内存剩余多少，理论上Metaspace就可以有多大（貌似容量还与操作系统的虚拟内存有关？这里不太清楚），这解决了空间不足的问题。\n\n不过，让Metaspace变得无限大显然是不现实的，因此我们也要限制Metaspace的大小：使用-XX:MaxMetaspaceSize参数来指定Metaspace区域的大小。JVM默认在运行时根据需要动态地设置MaxMetaspaceSize的大小。\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);