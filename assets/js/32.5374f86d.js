(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{409:function(t,a,v){"use strict";v.r(a);var _=v(19),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"单例模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),v("h2",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),v("p",[t._v("一个类只能创建一个对象。\n单例模式是指在内存中只会创建且仅创建一次对象的设计模式。在程序中多次使用同一个对象且作用相同时，为了防止频繁地创建对象使得内存飙升，单例模式可以让程序仅在内存中创建一个对象，让所有需要调用的地方都共享这一单例对象。")]),t._v(" "),v("h2",{attrs:{id:"类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),v("p",[t._v("单例模式有两种类型：")]),t._v(" "),v("ul",[v("li",[t._v("懒汉式：在真正需要使用对象时才去创建该单例类对象")]),t._v(" "),v("li",[t._v("饿汉式：在类加载时已经创建好该单例对象，等待被程序使用")])]),t._v(" "),v("h2",{attrs:{id:"应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),v("p",[t._v("单例模式只允许创建一个对象，因此节省内存，加快对象访问速度，因此对象需要被公用的场合适合使用，如多个模块使用同一个数据源连接对象等等。如：")]),t._v(" "),v("ul",[v("li",[t._v("需要频繁实例化然后销毁的对象。")]),t._v(" "),v("li",[t._v("创建对象时耗时过多或者耗资源过多，但又经常用到的对象。")]),t._v(" "),v("li",[t._v("有状态的工具类对象。")]),t._v(" "),v("li",[t._v("频繁访问数据库或文件的对象。")])]),t._v(" "),v("p",[t._v("以下都是单例模式的经典使用场景：")]),t._v(" "),v("ul",[v("li",[t._v("资源共享的情况下，避免由于资源操作时导致的性能或损耗等。如上述中的日志文件，应用配置。")]),t._v(" "),v("li",[t._v("控制资源的情况下，方便资源之间的互相通信。如线程池等。")])]),t._v(" "),v("h2",{attrs:{id:"注意事项"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),v("p",[t._v("使用时不能用反射模式创建单例，否则会实例化一个新的对象\n使用懒单例模式时注意线程安全问题\n饿单例模式和懒单例模式构造方法都是私有的，因而是不能被继承的，有些单例模式可以被继承（如登记式模式）")])])}),[],!1,null,null,null);a.default=s.exports}}]);