(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{574:function(n,t,s){"use strict";s.r(t);var a=s(13),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"nginx-配置文件解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置文件解读"}},[n._v("#")]),n._v(" nginx-配置文件解读")]),n._v(" "),s("p",[n._v("nginx配置文件路径\n不同安装方式，nginx的文件存放路径也有所不同。")]),n._v(" "),s("p",[n._v("源码编译安装方式：在安装目录下的conf目录下，比如我的安装目录是/usr/local/nginx，那么他的配置文件就在/usr/local/nginx/conf目录下。")]),n._v(" "),s("p",[n._v("yum安装方式：在/etc/nginx/目录（主配置文件）与/etc/nginx/conf.d目录下。")]),n._v(" "),s("h2",{attrs:{id:"nginx配置文件的结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx配置文件的结构"}},[n._v("#")]),n._v(" nginx配置文件的结构")]),n._v(" "),s("p",[n._v("通常源码安装的nginx的配置文件，会是下面这种结构，yum安装的有细微差异（大致是一样的，就是server是通过include引用的独立配置文件）。")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\nevents "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\nhttp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n    server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v("\n        location "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            root html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),s("p",[n._v("nginx的配置指令可以分为两大类：指令块与单个指令。指令块就是像events，http，server等，单独指令就是像root html;这样的。")]),n._v(" "),s("p",[n._v("nginx规定指令块可以嵌套，如http块中可以嵌套server指令，server块中可以嵌套location指令，指令可以同时出现在不同的指令块，如root指令可以同时出现在http、server和location指令块，需要注意的是在location中定义的指令会覆盖server，http的指令。")]),n._v(" "),s("h2",{attrs:{id:"代码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码解析"}},[n._v("#")]),n._v(" 代码解析")]),n._v(" "),s("p",[n._v("全局配置")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("user  nobody"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\nworker_processes  "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#error_log  logs/error.log;")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#error_log  logs/error.log  notice;")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#error_log  logs/error.log  info;")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#pid        logs/nginx.pid;")]),n._v("\n\nevents "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    use epoll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    worker_connections  "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\nuser  :指定nginx的工作进程的用户及用户组，默认是nobody用户。\n\nworker_processes   :指定工作进程的个数，默认是1个。具体可以根据服务器cpu数量进行设置，\n                    比如cpu有4个，可以设置为4。如果不知道cpu的数量，可以设置为auto。\n                    nginx会自动判断服务器的cpu个数，并设置相应的进程数。\n                    \nerror_log   :设置nginx的错误日志路径，并设置相应的输出级别。\n             如果编译时没有指定编译调试模块，那么 info就是最详细的输出模式了。\n             如果有编译debug模块，那么debug时最为详细的输出模式。这里设置为默认就好了。\n             \npid     :指定nginx进程pid的文件路径。\n\nevents  :这个指令块用来设置工作进程的工作模式以及每个进程的连接上限。\nuse :用来指定nginx的工作模式，通常选择epoll，除了epoll，还有select,poll。\nworker_connections      :定义每个工作进程的最大连接数，默认是1024。\n                         客户端最大连接数，就要考虑有几个工作进程了，两者相乘就是的。\n                         当nginx作反向代理时，需要除以2.\n                    \n                        ps:进程的最大连接数受Linux系统进程的最大打开文件数限制。\n                        比如ulimit -n 默认时1024，如果不改变这个值，\n                        即使修改工作进程为2048，也无法处理这么多连接。\n")])])]),s("p",[n._v("http指令块")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("http "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    include       mime.types"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    default_type  application/octet-stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#                  '$status $body_bytes_sent \"$http_referer\" '")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v('#                  \'"$http_user_agent" "$http_x_forwarded_for"\';')]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#access_log  logs/access.log  main;")]),n._v("\n    client_max_body_size 20m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    client_header_buffer_size 32K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    large_client_header_buffers "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),n._v(" 32k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    Sendfile on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    tcp_nopush on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    tcp_nodelay on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#keepalive_timeout  0;")]),n._v("\n    keepalive_timeout  "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("65")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#gzip  on;")]),n._v("\n    server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n        location "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            root html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\ninclude     :主要是可以引用指定的配置文件。\ndefault_type        :设定默认类型为二进制流，也就是当文件类型未定义时使用这种方式，\n                    例如在没有配置PHP环境时，Nginx是不予解析的，\n                    此时，用浏览器访问PHP文件就会出现下载窗口。\nlog_format      :定义日志文件格式，并默认取名为main，可以自定义该名字。\n                 也可以通过添加，删除变量来自定义日志文件的格式。\n                 \naccess_log      :定义访问日志的存放路径，并且通过引用log_format所定义的main名称设置其输出格式。\nsendfile    :用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞；\nkeepalive_timeout       :设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("gzip")]),n._v("  on        :开启压缩功能，减少文件传输大小，节省带宽。\nclient_max_body_size        :用来设置允许客户端请求的最大的单个文件字节数\nclient_header_buffer_size       :用于指定来自客户端请求头的header_buffer大小。\n                                 对于大多数请求，1K的缓冲区大小已经足够，\n                                 如果自定义了消息头或有更大的Cookie，可以增加缓冲区大小。这里设置为32K\nlarge_client_header_buffers     :用来指定客户端请求中较大的消息头的缓存最大数量和大小，\n                                “4”为个数，“128K”为大小，最大缓存量为4个128K\nclient_header_timeout       :设置客户端请求头读取超时时间。如果超过这个时间，\n                             客户端还没有发送任何数据，Nginx将返回“Request "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("time")]),n._v(" out（408）”错误\nclient_body_timeout     :设置客户端请求主体读取超时时间。\n                         如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("time")]),n._v(" out（408）”错误，默认值是60\nsend_timeout        :指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，\n                    如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。\n")])])]),s("h2",{attrs:{id:"server指令块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#server指令块"}},[n._v("#")]),n._v(" server指令块")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        listen       "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        server_name  localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#charset koi8-r;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#access_log  logs/host.access.log  main;")]),n._v("\n         index  index.html index.htm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        location /\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            root   html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#error_page  404              /404.html;")]),n._v("\n        error_page   "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("500")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("502")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("503")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("504")]),n._v("  /50x.html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        location "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" /50x.html "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            root   html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#location ~ \\.php$ {")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#}")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#location ~ /\\.ht {")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#    deny  all;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\nserver      :用来定义虚拟主机。\nlisten      :设置监听端口，默认为80端口\nserver_name     :域名，多个域名通过逗号隔开\nCharset     :设置网页的默认编码格式\naccess_log      :指定该虚拟主机的独立访问日志，会覆盖前面的全局配置。\nindex        :设置默认的索引文件\nlocation       :定义请求匹配规则。\nerror_page      :定义访问错误返回的页面，凡是状态码是500 "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("502")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("503")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("504")]),n._v(" 都会返回这个页面。\n")])])]),s("h2",{attrs:{id:"location指令块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#location指令块"}},[n._v("#")]),n._v(" location指令块")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#location ~ \\.php$ {")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#    root           html;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#    fastcgi_pass   127.0.0.1:9000;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#    fastcgi_index  index.php;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#    include        fastcgi_params;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#}")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# deny access to .htaccess files, if Apache's document root")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# concurs with nginx's one")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#location ~ /\\.ht {")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#    deny  all;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#}")]),n._v("\nlocation ~ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("\\")]),n._v(".php$     :凡是以php结尾文件，都会匹配到这条规则。\nroot        :php文件存放的目录\nfastcgi_pass        :指定php-fpm进程管理的ip端口或者unix套接字\nfastcgi_index   :指定php脚本目录下的索引文件\nfastcgi_param       :指定传递给FastCGI服务器的参数\nlocation ~ /"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("\\")]),n._v(".ht        :凡是请求类似.ht资源，都拒绝。\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);