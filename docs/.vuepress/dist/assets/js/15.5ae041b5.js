(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{194:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"git操作指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git操作指南","aria-hidden":"true"}},[a._v("#")]),a._v(" Git操作指南")]),a._v(" "),s("h3",{attrs:{id:"下载github分支上的文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载github分支上的文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 下载GitHub分支上的文件")]),a._v(" "),s("ul",[s("li",[a._v("默认的我们会下载master分支上的文件，但是由于有可能还会存在其他的分支，甚至其他分支上的文件与主分支上的文件大相径庭，所以我们可以这样操作clone")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone -b branch_name URL.git\n")])])]),s("h3",{attrs:{id:"切换分支，并提交文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切换分支，并提交文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 切换分支，并提交文件")]),a._v(" "),s("p",[a._v("创建新分支")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch -c branch_name\n")])])]),s("p",[a._v("切换到新分支")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout branch_name\n")])])]),s("p",[a._v("列出所有分支")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch -a\n")])])]),s("p",[a._v("合并分支")]),a._v(" "),s("ol",[s("li",[a._v("切换到master(主分支)")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("合并新分支(子分支)")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge --no-ff branch_name\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("提交注释")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -am "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"merage affect REAMD.md"')]),a._v("\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[a._v("上传更新")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push\n")])])]),s("h3",{attrs:{id:"git-clone-的参数depth-1有什么用？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-clone-的参数depth-1有什么用？","aria-hidden":"true"}},[a._v("#")]),a._v(" git clone 的参数depth=1有什么用？")]),a._v(" "),s("ul",[s("li",[a._v("depth用于指定克隆深度，为1即表示只克隆最近一次commit.\n这种方法克隆的项目只包含最近的一次commit的一个分支，体积很小，即可解决文章开头提到的项目过大导致Timeout的问题，但会产生另外一个问题，他只会把默认分支clone下来，其他远程分支并不在本地，所以这种情况下，需要用如下方法拉取其他分支：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ git clone --depth 1 https://github.com/username/xxxxxxx.git\n$ git remote set-branches origin 'remote_branch_name'\n$ git fetch --depth 1 origin remote_branch_name\n$ git checkout remote_branch_name\n")])])])])}],!1,null,null,null);t.default=r.exports}}]);